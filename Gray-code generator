module graycodegen
#(parameter N=4)
(output logic[N-1:0]y[(2**N)-1:0]);
logic [N-1:0]x[(2**N)-1:0];
genvar i;
genvar j; 

assign x[0]=0;
for(i=1;i<(2**N);i++)
   begin
     assign x[i] = x[i-1] + 1;
   end 
for ( i=0;i<(2**N);i++)
  begin
	assign y[i][N-1]=x[i][N-1];
	for( j=0; j<N-1; j++) 
        begin
		assign y[i][j]=x[i][j]^x[i][j+1]; 
	end 
  end
endmodule
module testgraycodegen();        
logic [3:0]y[15:0];
graycodegen dut(y); 
initial begin #100;
if (y[0]  !== 4'b0000) $display("0000 failed.");
if (y[1]  !== 4'b0001) $display("0001 failed.");
if (y[2]  !== 4'b0011) $display("0011 failed.");
if (y[3]  !== 4'b0010) $display("0010 failed.");
if (y[4]  !== 4'b0110) $display("0110 failed.");
if (y[5]  !== 4'b0111) $display("0111 failed.");
if (y[6]  !== 4'b0101) $display("0101 failed.");
if (y[7]  !== 4'b0100) $display("0100 failed.");
if (y[8]  !== 4'b1100) $display("1100 failed.");
if (y[9]  !== 4'b1101) $display("1101 failed.");
if (y[10] !== 4'b1111) $display("1111 failed.");
if (y[11] !== 4'b1110) $display("1110 failed.");
if (y[12] !== 4'b1010) $display("1010 failed.");
if (y[13] !== 4'b1011) $display("1011 failed.");
if (y[14] !== 4'b1001) $display("1001 failed.");
if (y[15] !== 4'b1000) $display("1000 failed.");
end
endmodule
